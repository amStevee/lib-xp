services:
  # db:
  #   image: postgres:16
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB:${POSTGRES_DB}
  #     - POSTGRES_USER:${POSTGRES_USER}
  #     - POSTGRES_PASSWORD:${POSTGRES_PASSWORD}
  #   ports:
  #     - 5432:5432

  web:
    build:
      context: ./client
      dockerfile: ./Dockerfile
    ports:
      - 3000:3000
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      PORT: ${PORT}
    volumes:
      - "./client:/code"
    depends_on:
      - server

  server:
    restart: unless-stopped
    build:
      context: ./server
      dockerfile: ./Dockerfile
    ports:
      - 3010:3010
      - 9229:9229 # debugging port
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      SES_EMAIL_SOURCE: ${SES_EMAIL_SOURCE}
      REDIS_URL: ${REDIS_URL}
      PORT: 3010 
      NODE_ENV: development   # To use your production database connection string, use `defang config set DATABASE_URL`
      DEBUG: "libxp:*"  # Enable debugging for all libxp modules
    # volumes:
    #   - "./server:/code" 
    #   - "/code/node_modules"  # Prevents node_modules from being overwritten by the host
    # depends_on:
    #   - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 5
